/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projeto;

import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.URL;
import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import sun.audio.*;
/**
 *
 * @author Vitor
 */
public class FormJogo extends javax.swing.JFrame implements Runnable{

    private boolean up;
    private boolean left;
    private boolean right;
    private boolean down;
    private boolean mouseDragged;
    private boolean mouseClicked;
    private boolean gameOver;
    private boolean keyExit;
    private boolean tiro;
    private int mx;
    private int my;
    private ImageIcon imgCenario = new ImageIcon(this.getClass().getResource("/").getPath() + "img/cenario.png");
    
    public FormJogo() {
        initComponents();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_W:
                up = true;
                break;
            case KeyEvent.VK_A:
                left = true;
                break;
            case KeyEvent.VK_S:
                down = true;
                break;
            case KeyEvent.VK_D:
                right = true;
                break;
            case KeyEvent.VK_ESCAPE:
                keyExit = true;
                break;
            case KeyEvent.VK_SPACE:
                tiro = true;
                play("pistol.wav");
                break;
            case KeyEvent.BUTTON1_DOWN_MASK:
                tiro = true;
                break;
            default:
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_W:
                up = false;
                break;
            case KeyEvent.VK_A:
                left = false;
                break;
            case KeyEvent.VK_S:
                down = false;
                break;
            case KeyEvent.VK_D:
                right = false;
                break;
            case KeyEvent.VK_ESCAPE:
                keyExit = false;
                break;
            case KeyEvent.VK_SPACE:
                tiro = false;
                break;
            default:
                break;
        }
    }//GEN-LAST:event_formKeyReleased

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        mx = evt.getX();
        my = evt.getY();
        
        mouseDragged = false;
        
        evt.consume();
    }//GEN-LAST:event_formMouseMoved

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        mx = evt.getX();
        my = evt.getY();
        
        mouseDragged = true;
        
        evt.consume();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        play("pistol.wav");
        tiro = true;
    }//GEN-LAST:event_formMouseClicked
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FormJogo().setVisible(true);
        });
    }
    
    @Override
    public void run() {
        Graphics2D g2Jogador;
        Graphics2D g2Cenario;
        Graphics2D g2GameOver;
        Graphics2D g2Zumbi;
        Graphics2D g2Tiro;
        Graphics2D g2;
        Jogador jogador = new Jogador(getWidth(), getHeight(), "img/player.png");
        //Zumbi zumbi = new Zumbi("img/zumbi.png");
        long start = System.currentTimeMillis();
        ArrayList<Tiro> tiros = new ArrayList<Tiro>();
        ArrayList<Zumbi> zumbis = new ArrayList<Zumbi>();
        ArrayList<Obstaculo> obstaculos = new ArrayList<Obstaculo>();
        
        obstaculos.add(new Obstaculo(410, 325, 80, 80));
        obstaculos.add(new Obstaculo(926, 444, 90, 105));
        obstaculos.add(new Obstaculo(1025, 207, 90, 90));
        obstaculos.add(new Obstaculo(1085, 40, 200, 80));
        obstaculos.add(new Obstaculo(1210, 520, 70, 180));
        
        play("audio.wav");
        
        //Resolucao 1280x720
        setSize(1280, 720);
        
        //cursor transparente
        cursorTransparente();
        
        while(!gameOver) {
            g2GameOver = (Graphics2D) getBufferStrategy().getDrawGraphics();
            g2Jogador = (Graphics2D) getBufferStrategy().getDrawGraphics();
            g2Cenario = (Graphics2D) getBufferStrategy().getDrawGraphics();
            g2Zumbi = (Graphics2D) getBufferStrategy().getDrawGraphics();
            g2Tiro = (Graphics2D) getBufferStrategy().getDrawGraphics();
            g2 = (Graphics2D) getBufferStrategy().getDrawGraphics();
            
            limpaTela(g2Jogador);
            
            //jogador
            jogador.ultimoX = jogador.x;
            jogador.ultimoY = jogador.y;
            jogador.desenharJogador(g2Jogador, mx, my);
            jogador.mover();
            movimentacaoJogador(jogador);
            trataObstaculos(jogador, obstaculos);
            colisaoTiroZumbi(zumbis, tiros);
            atirar(g2Tiro, jogador, tiros);
            
            //nascer zumbis
            zumbis(g2Zumbi, jogador, zumbis);
            
            //verifica se o jogador esta sem vida (acaba o jogo)
            fimJogo(g2GameOver, jogador, start);
            
            g2Jogador.dispose();
            getBufferStrategy().show();
            try {
                Thread.sleep(15);
            } catch (InterruptedException ex) {
            }
        }
    }
    
    private void movimentacaoJogador(Jogador jogador) {
        jogador.setIncX(0);
        jogador.setIncY(0);
        
        if (up && jogador.getY() > 80) {
            jogador.setIncY(-2);
        }
        if (down && jogador.getY() < getHeight() - 110 ) {
            jogador.setIncY(2);
        }
        if (right && jogador.getX() < getWidth() - jogador.getImgJogador().getIconWidth()) {
            jogador.setIncX(2);
        }
        if (left && jogador.getX() > 40) {
            jogador.setIncX(-2);
        }
    }
    
    private void limpaTela(Graphics2D g2) {
        desenharCenario(g2);
        //acompanha o cursor
        g2.setColor(Color.GREEN);
        g2.fillOval(mx, my, 10, 10);
    }

    private void cursorTransparente() {
        BufferedImage cursorImg = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
        Cursor blankCursor = Toolkit.getDefaultToolkit().createCustomCursor(cursorImg, new Point(0,0), "blank cursor");
        getContentPane().setCursor(blankCursor);
    }

    private void desenharCenario(Graphics2D g2) {
        if(imgCenario != null){
            g2.drawImage(imgCenario.getImage(), 0, 0, null);
        }
    }

    private void movimentacaoZumbi(Zumbi zumbi, Jogador jogador) {
        zumbi.setIncX(0);
        zumbi.setIncY(0);
        
        if(zumbi.getX() < jogador.getX())
            zumbi.setIncX(1);
        if(zumbi.getX() > jogador.getX())
            zumbi.setIncX(-1);
        if(zumbi.getY() < jogador.getY())
            zumbi.setIncY(1);
        if (zumbi.getY() > jogador.getY())
            zumbi.setIncY(-1);
                
        /*System.out.println(zumbi.x);
        System.out.println(zumbi.y);*/
    }

    private void play(String nomeAudio) {
        URL url = getClass().getResource(nomeAudio);
        AudioClip audio = Applet.newAudioClip(url);
        audio.play();
        
        if("rain.wav".equals(nomeAudio))
            audio.loop();
    }

    private void colisaoZumbiJogador(Zumbi zumbi, Jogador jogador) {
        int zumbiX = zumbi.x;
        int zumbiY = zumbi.y;
        int jogadorX = jogador.x;
        int jogadorY = jogador.y;
        
        
        if((zumbiX == jogadorX) && (zumbiY == jogadorY)){
            switch (direcao(zumbi)) {
                case 1:
                    zumbi.setIncY(-100);
                    jogador.hp--;
                    play("ouch.wav");
                    break;
                case 2:
                    zumbi.setIncX(100);
                    jogador.hp--;
                    play("ouch.wav");
                    break;
                case 3:
                    zumbi.setIncY(100);
                    jogador.hp--;
                    play("ouch.wav");
                    break;
                case 4:
                    zumbi.setIncX(-100);
                    jogador.hp--;
                    play("ouch.wav");
                    break;    
            }
            System.out.println(jogador.hp);
        }
    }
    
    public int direcao(Zumbi z){
        int width = z.getDirecaoX();
        int height = z.getDirecaoY();
        
        if (width == 640 && height == 0)
            return 1;
        else if (width == 1280 && height == 360)
            return 2;
        else if (width == 640 && height == 720)
            return 3;
        else
            return 4;
    }

    private void fimJogo(Graphics2D g2, Jogador jogador, long start) {
        if(jogador.getHp() < 1) {
                play("death.wav");
                play("gameOver.wav");
                long elapsedTime = System.currentTimeMillis()- start;
                elapsedTime = elapsedTime / 1000;
                
                String msg = "GAME OVER";
                g2.setColor(Color.BLACK);
                g2.fillRect(350, 300, 600, 160);
                g2.setColor(Color.RED);
                g2.setFont(new Font("Arial", Font.BOLD, 40));
                g2.drawString(msg, 520, 360);
                g2.drawString("You have survived " + elapsedTime + " seconds!", 370, 420);
                
                gameOver = true;
            }
    }

    private void colisaoTiroZumbi(ArrayList<Zumbi> zumbis, ArrayList<Tiro> tiros) {
        for(Tiro t: tiros){
            Rectangle r1 = t.getLimites();
            for(Zumbi z: zumbis) {
                Rectangle r2 = z.getLimites();
                if(r1.intersects(r2)) {
                    t.visivel = false;
                    z.visivel = false;
                }
            }
        }
    }

    private void atirar(Graphics2D g2Tiro, Jogador jogador, ArrayList<Tiro> tiros) {
        for(Tiro t: tiros){
                if(t.visivel)
                    t.draw(g2Tiro);
            }
            for(Tiro t: tiros){
                if(t.visivel)
                    t.travel();
            }
            if(tiro){
                Tiro t = new Tiro(0, 1280, 0, 720, jogador.x, jogador.y, mx, my);
                tiros.add(t);
                tiro = false;
            }
    }

    private void trataObstaculos(Base b, ArrayList<Obstaculo> obstaculos) {
        if(colisaoObstaculo(obstaculos, b)) {
            b.x = b.ultimoX;            
            b.y = b.ultimoY;            
        } 
    }
    
    private boolean colisaoObstaculo(ArrayList<Obstaculo> obstaculos, Base b){
        for(Obstaculo o: obstaculos){
            if(b.getLimites().intersects(o.getLimites()))
                return true;
        }
        return false;
    }

    private void zumbis(Graphics2D g2Zumbi, Jogador jogador, ArrayList<Zumbi> zumbis) {
        Random r = new Random();
        int n = r.nextInt(3000) + 1;
        
        if(n < 10){
            zumbis.add(new Zumbi("img/zumbi.png"));
        }
        else if(n < 20) {
            zumbis.add(new Zumbi("img/zumbi.png"));
            zumbis.add(new Zumbi("img/zumbi.png"));
        }
        else if (n < 30) {
            zumbis.add(new Zumbi("img/zumbi.png"));
            zumbis.add(new Zumbi("img/zumbi.png"));
            zumbis.add(new Zumbi("img/zumbi.png"));
        }

        //zumbi
        for(Zumbi z: zumbis){
            if(z.visivel)
                z.desenhar(g2Zumbi, jogador.getX(), jogador.getY());
        }
        for(Zumbi z: zumbis) {
            if(z.visivel) {
                z.ultimoX = z.x -1;
                z.ultimoY = z.y -1;
                movimentacaoZumbi(z, jogador);
                colisaoZumbiJogador(z, jogador);
                //trataObstaculos(z, obstaculos);
            }
        }
        for(Zumbi z: zumbis){
            if(z.visivel)
                z.mover();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
